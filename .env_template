#Don't change this:
FLASK_APP=main.py

#Introduce True or False for debugger activation. In production should be False. Example:
FLASK_DEBUG=False

#Introduce your aleatory secret key for flask. Example: 
FLASK_SECRET_KEY=jshd4S11jnA3sras178q783tt980sasZsP0

#Introduce your database path. The app includes a database example with some transactions, to use it introduce data/criptowallet.db
FLASK_PATH_SQLITE=data/criptowallet.db

#Introduce your valid CoinAPI.io Key - You can get one for in https://www.coinapi.io. Example:
FLASK_COIN_IO_API_KEY=6FDAAA14-400A-4AA5-0084-EE08DDDDC460

#Introduce a list of coins list you want to operate. Format should be [["value of coin 1","user visble name of coin 1"], ["value of coin 2","user visble name of coin 2"], ... ,["value of coin n","user visble name of coin n"]]
# 1) Use an exising coin in CoinAPI.io
# 2) Use the following data to operate with app database example: [["EUR","EUR"],["BTC","BTC"],["BNB","BNB"],["ETH","ETH"],["USDT","USDT"],["XRP","XRP"],["ADA","ADA"],["SOL","SOL"],["DOT","DOT"],["MATIC","MATIC"]]
# Example:

FLASK_COIN_OPTIONS_LIST=[["EUR","EUR"],["BTC","BTC"],["BNB","BNB"],["ETH","ETH"],["USDT","USDT"],["XRP","XRP"],["ADA","ADA"],["SOL","SOL"],["DOT","DOT"],["MATIC","MATIC"]]


#Introduce Javascript Path
#1) If you want to display the classic version with 2 transaction purchase steps (calculate and purchase) use /static/js/app_v1.js.
#2) If you want to display the new version with 3 transaction purchase steps (calculate, create an order and purchase) use /static/js/app_v2.js
#Example:

FLASK_JAVASCRIPT_PATH=/static/js/app_v2.js